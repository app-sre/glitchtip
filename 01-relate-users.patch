diff --git a/glitchtip/settings.py b/glitchtip/settings.py
index 59c46d2..5f42013 100644
--- a/glitchtip/settings.py
+++ b/glitchtip/settings.py
@@ -421,6 +421,10 @@ CELERY_BEAT_SCHEDULE = {
         "task": "glitchtip.uptime.tasks.dispatch_checks",
         "schedule": timedelta(seconds=30),
     },
+    "relate-users": {
+        "task": "organizations_ext.tasks.relate_users",
+        "schedule": timedelta(minutes=1),
+    },
 }
 
 
@@ -556,6 +560,7 @@ ACCOUNT_EMAIL_REQUIRED = True
 ACCOUNT_USERNAME_REQUIRED = False
 ACCOUNT_USER_MODEL_USERNAME_FIELD = None
 ACCOUNT_ADAPTER = "glitchtip.social.MFAAccountAdapter"
+ACCOUNT_UNIQUE_EMAIL = False
 SOCIALACCOUNT_ADAPTER = "glitchtip.social.CustomSocialAccountAdapter"
 INVITATION_BACKEND = "organizations_ext.invitation_backend.InvitationBackend"
 SOCIALACCOUNT_PROVIDERS = {}
diff --git a/organizations_ext/tasks.py b/organizations_ext/tasks.py
index 666f1d5..e6cedaa 100644
--- a/organizations_ext/tasks.py
+++ b/organizations_ext/tasks.py
@@ -46,3 +46,20 @@ def send_email_met_quota(organization_id: int):
 @shared_task
 def send_email_invite(org_user_id: int, token: str):
     InvitationEmail(pk=org_user_id, token=token).send_email()
+
+
+@shared_task
+def relate_users():
+    """Create missing django users for all org users and accept the invite manually."""
+    from django.contrib.auth import get_user_model
+
+    from .models import OrganizationUser
+
+    User = get_user_model()
+    for org_user in OrganizationUser.objects.filter(user=None):
+        user, created = User.objects.get_or_create(
+            email=org_user.email,
+        )
+        if created:
+            user.set_unusable_password()
+        org_user.accept_invite(user)
