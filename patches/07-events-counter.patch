diff --git a/apps/observability/metrics.py b/apps/observability/metrics.py
index fea44358..94822f50 100644
--- a/apps/observability/metrics.py
+++ b/apps/observability/metrics.py
@@ -1,7 +1,8 @@
 from django.core.cache import cache
-from django.db.models import Count
+from django.db.models import Count, Sum
 from prometheus_client import Counter, Gauge
 
+
 organizations_metric = Gauge("glitchtip_organizations", "Number of organizations")
 projects_metric = Gauge(
     "glitchtip_projects", "Number of projects per organization", ["organization"]
@@ -12,10 +13,8 @@ issues_counter = Counter(
     ["project", "organization"],
 )
 
-events_counter = Counter(
-    "glitchtip_events",
-    "Events creation counter per project",
-    ["project", "organization", "issue"],
+events_counter = Gauge(
+    "glitchtip_events", "Events per project", ["project", "organization"]
 )
 
 OBSERVABILITY_ORG_CACHE_KEY = "observability_org_metrics"
@@ -24,6 +23,7 @@ OBSERVABILITY_ORG_CACHE_KEY = "observability_org_metrics"
 async def compile_metrics():
     """Update and cache the organization and project metrics"""
     from apps.organizations_ext.models import Organization  # avoid circular import
+    from apps.projects.models import IssueEventProjectHourlyStatistic
 
     orgs = cache.get(OBSERVABILITY_ORG_CACHE_KEY)
     if orgs is None:
@@ -40,6 +40,18 @@ async def compile_metrics():
 
     organizations_metric.set(len(orgs))
 
+    async for i in (
+        IssueEventProjectHourlyStatistic.objects.select_related(
+            "project", "project__organization"
+        )
+        .values("project__slug", "project__organization__slug")
+        .annotate(events=Sum("count"))
+    ):
+        events_counter.labels(
+            project=i["project__slug"],
+            organization=i["project__organization__slug"],
+        ).set(i["events"])
+
 
 def clear_metrics_cache():
     cache.delete(OBSERVABILITY_ORG_CACHE_KEY)
