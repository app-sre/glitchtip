apiVersion: template.openshift.io/v1
kind: Template
labels:
  template: glitchtip
metadata:
  name: glitchtip
  annotations:
    description: glitchtip
objects:
# -------- CONFIG MAP ----------
- apiVersion: v1
  kind: ConfigMap
  data:
    GLITCHTIP_DOMAIN: ${GLITCHTIP_DOMAIN}
    PORT: "${GT_APP_PORT}"
    ENABLE_OBSERVABILITY_API: "${ENABLE_OBSERVABILITY_API}"
    ENABLE_ORGANIZATION_CREATION: "${ENABLE_ORGANIZATION_CREATION}"
    ENABLE_USER_REGISTRATION: "${ENABLE_USER_REGISTRATION}"
    DEFAULT_FROM_EMAIL: ${DEFAULT_FROM_EMAIL}
    I_PAID_FOR_GLITCHTIP: "True"
    GLITCHTIP_MAX_EVENT_LIFE_DAYS: "${GLITCHTIP_MAX_EVENT_LIFE_DAYS}"
    SECRET_KEY: "${SECRET_KEY}"
    SESSION_COOKIE_AGE: "${SESSION_TIMEOUT_SECONDS}"
    UWSGI_LISTEN: "${UWSGI_LISTEN}"
    UWSGI_ARGS: "${UWSGI_ARGS}"
    TASK_DEBOUNCE_DELAY: "${TASK_DEBOUNCE_DELAY_SECONDS}"
    MAINTENANCE_EVENT_FREEZE: "${MAINTENANCE_EVENT_FREEZE}"
    MAX_ISSUES_PER_ALERT: "${MAX_ISSUES_PER_ALERT}"
  metadata:
    annotations:
      qontract.recycle: "true"
    labels:
      app.kubernetes.io/name: glitchtip
    name: glitchtip-configmap

# ---- BEAT DEPLOYMENT ------
- apiVersion: v1
  kind: ServiceAccount
  metadata:
    name: glitchtip-beat
    labels:
      app.kubernetes.io/component: beat
      app.kubernetes.io/name: glitchtip

- apiVersion: apps/v1
  kind: Deployment
  metadata:
    name: glitchtip-beat
    annotations:
      ignore-check.kube-linter.io/minimum-three-replicas: "Beat deployment should only have 1 replica"
      ignore-check.kube-linter.io/unset-cpu-requirements: "no cpu limits"
    labels:
      app.kubernetes.io/component: beat
      app.kubernetes.io/name: glitchtip
  spec:
    progressDeadlineSeconds: 600
    replicas: 1
    revisionHistoryLimit: 10
    selector:
      matchLabels:
        app.kubernetes.io/component: beat
        app.kubernetes.io/instance: glitchtip
        app.kubernetes.io/name: glitchtip
    strategy:
      type: Recreate
    template:
      metadata:
        labels:
          app.kubernetes.io/component: beat
          app.kubernetes.io/instance: glitchtip
          app.kubernetes.io/name: glitchtip
      spec:
        serviceAccountName: glitchtip-beat
        restartPolicy: Always
        containers:
        - env:
          - name: SERVER_ROLE
            value: beat
          - name: REDIS_URL
            valueFrom:
              secretKeyRef:
                name: ${REDIS_SECRET_NAME}
                key: redis.url
          - name: DATABASE_HOST
            valueFrom:
              secretKeyRef:
                name: ${RDS_SECRET_NAME}
                key: db.host
          - name: DATABASE_PASSWORD
            valueFrom:
              secretKeyRef:
                name: ${RDS_SECRET_NAME}
                key: db.password
          - name: DATABASE_NAME
            valueFrom:
              secretKeyRef:
                name: ${RDS_SECRET_NAME}
                key: db.name
          - name: DATABASE_USER
            valueFrom:
              secretKeyRef:
                name: ${RDS_SECRET_NAME}
                key: db.user
          envFrom:
            - configMapRef:
                name: glitchtip-configmap
          image: "${IMAGE}:${IMAGE_TAG}"
          imagePullPolicy: Always
          name: beat
          readinessProbe:
            exec:
              command: ["bash", "-c", "celery -A glitchtip inspect ping"]
            initialDelaySeconds: 40
            timeoutSeconds: 180
            periodSeconds: 30
            successThreshold: 1
            failureThreshold: 3
          livenessProbe:
            exec:
              command: ["bash", "-c", "celery -A glitchtip inspect ping"]
            initialDelaySeconds: 40
            timeoutSeconds: 180
            periodSeconds: 30
            successThreshold: 1
            failureThreshold: 3
          resources:
            requests:
              cpu: ${{BEAT_CPU_REQUESTS}}
              memory: ${{BEAT_MEMORY_REQUESTS}}
            limits:
              memory: ${{BEAT_MEMORY_LIMITS}}

# ------- WEB DEPLOYMENT --------------------
- apiVersion: v1
  kind: ServiceAccount
  metadata:
    name: glitchtip-web
    labels:
      app.kubernetes.io/component: web
      app.kubernetes.io/name: glitchtip

- apiVersion: apps/v1
  kind: Deployment
  metadata:
    annotations:
      ignore-check.kube-linter.io/unset-cpu-requirements: "no cpu limits"
    labels:
      app.kubernetes.io/component: web
      app.kubernetes.io/name: glitchtip
    name: glitchtip-web
  spec:
    replicas: ${{GT_WEB_REPLICAS}}
    selector:
      matchLabels:
        app.kubernetes.io/component: web
        app.kubernetes.io/name: glitchtip
    template:
      metadata:
        labels:
          app.kubernetes.io/component: web
          app.kubernetes.io/name: glitchtip
      spec:
        restartPolicy: Always
        serviceAccountName: glitchtip-web
        affinity:
          podAntiAffinity:
            requiredDuringSchedulingIgnoredDuringExecution:
            - labelSelector:
                matchExpressions:
                - key: app.kubernetes.io/component
                  operator: In
                  values:
                  - web
              topologyKey: "kubernetes.io/hostname"
        initContainers:
        - name: init-migration
          image: "${IMAGE}:${IMAGE_TAG}"
          command: ["python3", "./manage.py", "migrate"]
          env:
          - name: DATABASE_HOST
            valueFrom:
              secretKeyRef:
                name: ${RDS_SECRET_NAME}
                key: db.host
          - name: DATABASE_PASSWORD
            valueFrom:
              secretKeyRef:
                name: ${RDS_SECRET_NAME}
                key: db.password
          - name: DATABASE_NAME
            valueFrom:
              secretKeyRef:
                name: ${RDS_SECRET_NAME}
                key: db.name
          - name: DATABASE_USER
            valueFrom:
              secretKeyRef:
                name: ${RDS_SECRET_NAME}
                key: db.user
          resources:
            requests:
              cpu: ${{GT_WEB_CPU_REQUESTS}}
              memory: ${{GT_WEB_MEMORY_REQUESTS}}
            limits:
              memory: ${{GT_WEB_MEMORY_LIMITS}}
        - name: init-api-users
          image: "${IMAGE}:${IMAGE_TAG}"
          command: ["python3", "appsre/create-api-users.py"]
          env:
          - name: DATABASE_HOST
            valueFrom:
              secretKeyRef:
                name: ${RDS_SECRET_NAME}
                key: db.host
          - name: DATABASE_PASSWORD
            valueFrom:
              secretKeyRef:
                name: ${RDS_SECRET_NAME}
                key: db.password
          - name: DATABASE_NAME
            valueFrom:
              secretKeyRef:
                name: ${RDS_SECRET_NAME}
                key: db.name
          - name: DATABASE_USER
            valueFrom:
              secretKeyRef:
                name: ${RDS_SECRET_NAME}
                key: db.user
          - name: APPSRE_API_USER_1_EMAIL
            value: "${API_USER_1_EMAIL}"
          - name: APPSRE_API_USER_1_PASSWORD
            value: "${API_USER_1_PASSWORD}"
          - name: APPSRE_API_USER_1_TOKEN
            value: "${API_USER_1_TOKEN}"
          - name: APPSRE_API_USER_2_EMAIL
            value: "${API_USER_2_EMAIL}"
          - name: APPSRE_API_USER_2_PASSWORD
            value: "${API_USER_2_PASSWORD}"
          - name: APPSRE_API_USER_2_TOKEN
            value: "${API_USER_2_TOKEN}"
          - name: APPSRE_API_USER_3_EMAIL
            value: "${API_USER_3_EMAIL}"
          - name: APPSRE_API_USER_3_PASSWORD
            value: "${API_USER_3_PASSWORD}"
          - name: APPSRE_API_USER_3_TOKEN
            value: "${API_USER_3_TOKEN}"
          - name: APPSRE_API_USER_4_EMAIL
            value: "${API_USER_4_EMAIL}"
          - name: APPSRE_API_USER_4_PASSWORD
            value: "${API_USER_4_PASSWORD}"
          - name: APPSRE_API_USER_4_TOKEN
            value: "${API_USER_4_TOKEN}"
          resources:
            requests:
              cpu: ${{GT_WEB_CPU_REQUESTS}}
              memory: ${{GT_WEB_MEMORY_REQUESTS}}
            limits:
              memory: ${{GT_WEB_MEMORY_LIMITS}}
        containers:
        - env:
          - name: SERVER_ROLE
            value: web
          - name: REDIS_URL
            valueFrom:
              secretKeyRef:
                name: ${REDIS_SECRET_NAME}
                key: redis.url
          - name: DATABASE_HOST
            valueFrom:
              secretKeyRef:
                name: ${RDS_SECRET_NAME}
                key: db.host
          - name: DATABASE_PASSWORD
            valueFrom:
              secretKeyRef:
                name: ${RDS_SECRET_NAME}
                key: db.password
          - name: DATABASE_NAME
            valueFrom:
              secretKeyRef:
                name: ${RDS_SECRET_NAME}
                key: db.name
          - name: DATABASE_USER
            valueFrom:
              secretKeyRef:
                name: ${RDS_SECRET_NAME}
                key: db.user
          - name: EMAIL_HOST
            valueFrom:
              secretKeyRef:
                name: ${SMTP_SETTINGS_SECRET}
                key: server
          - name: EMAIL_HOST_PASSWORD
            valueFrom:
              secretKeyRef:
                name: ${SMTP_SETTINGS_SECRET}
                key: password
          - name: EMAIL_HOST_USER
            valueFrom:
              secretKeyRef:
                name: ${SMTP_SETTINGS_SECRET}
                key: username
          - name: EMAIL_PORT
            valueFrom:
              secretKeyRef:
                name: ${SMTP_SETTINGS_SECRET}
                key: port
          - name: EMAIL_USE_TLS
            valueFrom:
              secretKeyRef:
                name: ${SMTP_SETTINGS_SECRET}
                key: require_tls
          envFrom:
            - configMapRef:
                name: glitchtip-configmap
          image: "${IMAGE}:${IMAGE_TAG}"
          name: web
          ports:
          - containerPort: ${{GT_APP_PORT}}
          lifecycle:
            preStop:
              exec:
                command:
                  - sh
                  - "-c"
                  - sleep 5
          readinessProbe:
            tcpSocket:
              port: ${{GT_APP_PORT}}
            periodSeconds: 15
            timeoutSeconds: 5
          startupProbe:
            tcpSocket:
              port: ${{GT_APP_PORT}}
            initialDelaySeconds: 5
            periodSeconds: 5
            timeoutSeconds: 5
          livenessProbe:
            tcpSocket:
              port: ${{GT_APP_PORT}}
            periodSeconds: 30
            timeoutSeconds: 10
          resources:
            requests:
              cpu: ${{GT_WEB_CPU_REQUESTS}}
              memory: ${{GT_WEB_MEMORY_REQUESTS}}
            limits:
              memory: ${{GT_WEB_MEMORY_LIMITS}}

# ---------- WEB SERVICE -----------
- apiVersion: v1
  kind: Service
  metadata:
    labels:
      app.kubernetes.io/component: web
      app.kubernetes.io/name: glitchtip
    name: glitchtip-web
  spec:
    ports:
    - name: "8000"
      port: ${{GT_APP_PORT}}
      targetPort: ${{GT_APP_PORT}}
    selector:
      app.kubernetes.io/component: web
      app.kubernetes.io/name: glitchtip

# --------- WORKER DEPLOYMENT --------------
- apiVersion: v1
  kind: ServiceAccount
  metadata:
    name: glitchtip-worker
    labels:
      app.kubernetes.io/component: worker
      app.kubernetes.io/name: glitchtip

- apiVersion: apps/v1
  kind: Deployment
  metadata:
    annotations:
      ignore-check.kube-linter.io/unset-cpu-requirements: "no cpu limits"
    labels:
      app.kubernetes.io/component: worker
      app.kubernetes.io/name: glitchtip
    name: glitchtip-worker
  spec:
    replicas: ${{GT_WORKER_REPLICAS}}
    selector:
      matchLabels:
        app.kubernetes.io/component: worker
        app.kubernetes.io/name: glitchtip
    template:
      metadata:
        labels:
          app.kubernetes.io/component: worker
          app.kubernetes.io/name: glitchtip
      spec:
        restartPolicy: Always
        serviceAccountName: glitchtip-worker
        affinity:
          podAntiAffinity:
            requiredDuringSchedulingIgnoredDuringExecution:
            - labelSelector:
                matchExpressions:
                - key: app.kubernetes.io/component
                  operator: In
                  values:
                  - worker
              topologyKey: "kubernetes.io/hostname"
        containers:
        - env:
          - name: SERVER_ROLE
            value: worker
          - name: REDIS_URL
            valueFrom:
              secretKeyRef:
                name: ${REDIS_SECRET_NAME}
                key: redis.url
          - name: DATABASE_HOST
            valueFrom:
              secretKeyRef:
                name: ${RDS_SECRET_NAME}
                key: db.host
          - name: DATABASE_PASSWORD
            valueFrom:
              secretKeyRef:
                name: ${RDS_SECRET_NAME}
                key: db.password
          - name: DATABASE_NAME
            valueFrom:
              secretKeyRef:
                name: ${RDS_SECRET_NAME}
                key: db.name
          - name: DATABASE_USER
            valueFrom:
              secretKeyRef:
                name: ${RDS_SECRET_NAME}
                key: db.user
          - name: EMAIL_HOST
            valueFrom:
              secretKeyRef:
                name: ${SMTP_SETTINGS_SECRET}
                key: server
          - name: EMAIL_HOST_PASSWORD
            valueFrom:
              secretKeyRef:
                name: ${SMTP_SETTINGS_SECRET}
                key: password
          - name: EMAIL_HOST_USER
            valueFrom:
              secretKeyRef:
                name: ${SMTP_SETTINGS_SECRET}
                key: username
          - name: EMAIL_PORT
            valueFrom:
              secretKeyRef:
                name: ${SMTP_SETTINGS_SECRET}
                key: port
          - name: EMAIL_USE_TLS
            valueFrom:
              secretKeyRef:
                name: ${SMTP_SETTINGS_SECRET}
                key: require_tls
          envFrom:
            - configMapRef:
                name: glitchtip-configmap
          image: "${IMAGE}:${IMAGE_TAG}"
          name: worker
          readinessProbe:
            exec:
              command: ["bash", "-c", "celery -A glitchtip inspect ping -d celery@$HOSTNAME | grep -q OK"]
            initialDelaySeconds: 40
            timeoutSeconds: 180
            periodSeconds: 30
            successThreshold: 1
            failureThreshold: 3
          livenessProbe:
            exec:
              command: ["bash", "-c", "celery -A glitchtip inspect ping -d celery@$HOSTNAME | grep -q OK"]
            initialDelaySeconds: 40
            timeoutSeconds: 180
            periodSeconds: 30
            successThreshold: 1
            failureThreshold: 3
          resources:
            requests:
              cpu: ${{GT_WORKER_CPU_REQUESTS}}
              memory: ${{GT_WORKER_MEMORY_REQUESTS}}
            limits:
              memory: ${{GT_WORKER_MEMORY_LIMITS}}


parameters:
- name: IMAGE
  description: Image to use for glitchtip
  value: "quay.io/app-sre/glitchtip"
  required: true

- name: IMAGE_TAG
  description: Glitchtip version
  value: "latest"
  required: true

- name: GT_APP_PORT
  description: Glitchtip uwsgi application port
  value: "8000"
  required: true

- name: GLITCHTIP_DOMAIN
  description: Glitchtip route url
  value: "https://glitchtip.stage.devshift.net"
  required: true

- name: DEFAULT_FROM_EMAIL
  description: Email address to use as the sender
  value: "no-reply@devshift.net"
  required: true

- name: SECRET_KEY
  description: This is used to provide cryptographic signing, and should be set to a unique, unpredictable value.
  required: true

- name: SESSION_TIMEOUT_SECONDS
  description: User session timeout in seconds
  value: "21600" # 6 hours
  required: true

- name: SMTP_SETTINGS_SECRET
  description: Secret with SMTP settings
  value: "smtp"
  required: true

- name: ENABLE_ORGANIZATION_CREATION
  description: Enable or disable the manual creation of the organization by users
  required: true
  value: "False"

- name: ENABLE_USER_REGISTRATION
  description: Enable or disable the manual user registration
  required: true
  value: "True"

- name: ENABLE_OBSERVABILITY_API
  description: Enable prometheus metrics exporter
  value: "True"
  required: true

- name: GLITCHTIP_MAX_EVENT_LIFE_DAYS
  description: Max number of days to keep events in the database
  value: "30"
  required: true

- description: RDS secret name
  name: RDS_SECRET_NAME
  value: glitchtip-rds

- description: Redis secret name
  name: REDIS_SECRET_NAME
  value: redis-url

- description: Set the UWSGI socket listen queue size
  name: UWSGI_LISTEN
  value: "128"
  required: true

- description: Custom UWSGI args
  name: UWSGI_ARGS
  value: "--stats /tmp/stats.socket"
  required: true

- description: Debounce delay for issue update tasks
  name: TASK_DEBOUNCE_DELAY_SECONDS
  value: "300"
  required: true

- description: Maintenance event freeze flag
  name: MAINTENANCE_EVENT_FREEZE
  value: "False"
  required: true

- description: How many issues to include in an alert
  name: MAX_ISSUES_PER_ALERT
  value: "1000"
  required: true

# Populated users
- name: API_USER_1_EMAIL
  description: Email of the first user to be created
  value: ""
- name: API_USER_1_PASSWORD
  description: Password of the first user to be created
  value: ""
- name: API_USER_1_TOKEN
  description: Token of the first user to be created
  value: ""

- name: API_USER_2_EMAIL
  description: Email of the second user to be created
  value: ""
- name: API_USER_2_PASSWORD
  description: Password of the second user to be created
  value: ""
- name: API_USER_2_TOKEN
  description: Token of the second user to be created
  value: ""

- name: API_USER_3_EMAIL
  description: Email of the third user to be created
  value: ""
- name: API_USER_3_PASSWORD
  description: Password of the third user to be created
  value: ""
- name: API_USER_3_TOKEN
  description: Token of the third user to be created
  value: ""

- name: API_USER_4_EMAIL
  description: Email of the fourth user to be created
  value: ""
- name: API_USER_4_PASSWORD
  description: Password of the fourth user to be created
  value: ""
- name: API_USER_4_TOKEN
  description: Token of the fourth user to be created
  value: ""

# Web Pod limits
- name: GT_WEB_REPLICAS
  description: Web replicas
  value: "3"
  required: true

- name: GT_WEB_MEMORY_REQUESTS
  description: Web memory requests
  value: "500Mi"
  required: true

- name: GT_WEB_MEMORY_LIMITS
  description: Web memory limits
  value: "500Mi"
  required: true

- name: GT_WEB_CPU_REQUESTS
  description: Web cpu requests
  value: "100m"
  required: true

# Worker Pod limits
- name: GT_WORKER_REPLICAS
  description: Worker replicas
  value: "3"
  required: true

- name: GT_WORKER_MEMORY_REQUESTS
  description: Worker memory requests
  value: "1200Mi"
  required: true

- name: GT_WORKER_MEMORY_LIMITS
  description: Worker memory limits
  value: "1200Mi"
  required: true

- name: GT_WORKER_CPU_REQUESTS
  description: Worker cpu requests
  value: "100m"
  required: true

# Beat Pod limits
- name: BEAT_MEMORY_REQUESTS
  description: Beat memory requests
  value: "700Mi"
  required: true

- name: BEAT_MEMORY_LIMITS
  description: Beat memory limits
  value: "700Mi"
  required: true

- name: BEAT_CPU_REQUESTS
  description: Beat cpu requests
  value: "100m"
  required: true
