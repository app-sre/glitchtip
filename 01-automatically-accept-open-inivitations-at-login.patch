diff --git a/glitchtip/social.py b/glitchtip/social.py
index c4ef995..ead2aa0 100644
--- a/glitchtip/social.py
+++ b/glitchtip/social.py
@@ -1,5 +1,5 @@
-from allauth.account.adapter import DefaultAccountAdapter
 from allauth.account import app_settings as allauth_settings
+from allauth.account.adapter import DefaultAccountAdapter
 from allauth.account.auth_backends import AuthenticationBackend
 from allauth.socialaccount.adapter import DefaultSocialAccountAdapter, get_adapter
 from allauth.socialaccount.helpers import complete_social_login
@@ -18,6 +18,7 @@ from rest_framework import serializers
 from rest_framework.response import Response
 
 from users.utils import is_user_registration_open
+
 from .constants import SOCIAL_ADAPTER_MAP
 
 DOMAIN = settings.GLITCHTIP_URL.geturl()
@@ -141,7 +142,11 @@ class SocialLoginSerializer(BaseSocialLoginSerializer):
         if isinstance(ret, HttpResponseBadRequest):
             raise serializers.ValidationError(ret.content)
 
+        print("before save")
+        print(f"{login.user.pk=}")
+        print(f"{login.user.email=}")
         if not login.is_existing:
+            print("here2")
             if allauth_settings.UNIQUE_EMAIL:
                 account_exists = (
                     get_user_model()
@@ -150,6 +155,7 @@ class SocialLoginSerializer(BaseSocialLoginSerializer):
                     )
                     .exists()
                 )
+                print(f"{account_exists=}")
                 if account_exists:
                     raise serializers.ValidationError(
                         _("User is already registered with this e-mail address."),
@@ -161,6 +167,15 @@ class SocialLoginSerializer(BaseSocialLoginSerializer):
                 login.lookup()
                 login.save(request, connect=True)
 
+        print("after save")
+        print(f"{login.user.pk=}")
+        print(f"{login.user.email=}")
+        # # automatically accept any open invitation for this user
+        # from organizations_ext.models import OrganizationUser
+
+        # for org_user in OrganizationUser.objects.filter(email=login.user.email):
+        #     org_user.accept_invite(login.user)
+
         attrs["user"] = login.account.user
 
         return attrs
